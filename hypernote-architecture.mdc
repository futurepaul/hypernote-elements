---
description: 
globs: 
alwaysApply: true
---
## Build System & Development Tools

### Runtime & Package Manager
- Uses **Bun** as bundler, runtime, and test framework
- **ALWAYS use `bun` for everything** - never use `node` or `npm`
- For quick inline tests: `bun -e "console.log('test')"`
- For running scripts: `bun run script.ts`
- For testing: `bun test`

### Build Tools
- [scripts/md-loader.ts](mdc:scripts/md-loader.ts) - **Custom Bun plugin** that allows importing `.md` files directly into TypeScript/JavaScript as string modules

### Example Management
- [scripts/update-example-json.ts](mdc:scripts/update-example-json.ts) - **Example JSON updater** that automatically compiles HNMD examples to JSON
- Usage: `bun run update-examples <example-name>` or `bun run update-examples all`
- Automatically discovers all `.md` files in examples/ directory
- Ensures JSON output always matches compiled HNMD source
- Use `bun run update-examples --list` to see available examples

### Debugging
- **Debug Mode**: Set `HYPERNOTE_DEBUG=true` environment variable for verbose logging
  - Shows detailed parsing steps
  - Logs style class conversion
  - Enhanced validation error reporting with actual values
  - Example: `HYPERNOTE_DEBUG=true bun run debug.ts`

## Development Workflow

1. **Spec Changes**: Update [README.md](mdc:README.md) or [OUTPUT.md](mdc:OUTPUT.md) first
2. **Implementation**: Update schemas, compiler, tokenizer to match spec
3. **Examples**: Add/update examples in [examples/](mdc:examples) folder - **only use implemented features**
4. **Update JSON**: Use `bun run update-examples <example-name>` or `bun run update-examples all` to regenerate JSON output
5. **Tests**: Ensure tests pass and cover new functionality using `bun test`
6. **Debugging**: Use `HYPERNOTE_DEBUG=true` for detailed logging when issues arise
7. **Frontend**: Update renderer if new element types are added
